name: Build and publish wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions: {}

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        # Build for Python 3.8-3.13
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
        
        # Skip 32-bit builds and musl builds for now
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
        
        # Build ARM64 on Linux and macOS
        CIBW_ARCHS_LINUX: "x86_64 aarch64"
        CIBW_ARCHS_MACOS: "x86_64 arm64"
        CIBW_ARCHS_WINDOWS: "AMD64"
        
        # Install system dependencies and Rust
        CIBW_BEFORE_ALL_LINUX: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y"
        CIBW_BEFORE_ALL_MACOS: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y"
        CIBW_BEFORE_ALL_WINDOWS: "rustup toolchain install stable"
        
        # Install maturin in each Python environment
        CIBW_BEFORE_BUILD: "pip install maturin"
        
        # Use maturin to build with static OpenSSL
        CIBW_BUILD_COMMAND: "maturin build --release --out {wheel_dir}"
        
        # Set environment variables - use vendored OpenSSL to avoid system dependency issues
        CIBW_ENVIRONMENT_LINUX: "PATH=$HOME/.cargo/bin:$PATH OPENSSL_STATIC=1 OPENSSL_VENDORED=1"
        CIBW_ENVIRONMENT_MACOS: "PATH=$HOME/.cargo/bin:$PATH"
        CIBW_ENVIRONMENT_WINDOWS: "OPENSSL_STATIC=1"
      
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  publish:
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
