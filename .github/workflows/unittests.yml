name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "YourStrong!Passw0rd"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Express"
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1' -C"
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Python package with maturin
        run: |
          maturin build --release
          pip install target/wheels/*.whl

      - name: Wait for MSSQL to be ready
        run: |
          echo "Waiting for SQL Server to be ready..."
          # Try with both old and new sqlcmd paths
          for i in {1..60}; do
            echo "Attempt $i/60..."
            if /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q "SELECT 1" -C; then
              echo "SQL Server is ready!"
              break
            elif /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q "SELECT 1"; then
              echo "SQL Server is ready!"
              break
            else
              echo "SQL Server not ready yet, waiting 5 seconds..."
              sleep 5
            fi
            if [ $i -eq 60 ]; then
              echo "SQL Server failed to start after 5 minutes"
              docker logs $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest)
              exit 1
            fi
          done

      - name: Run tests
        run: pytest tests
        env:
          FASTMSSQL_TEST_CONNECTION_STRING: "Server=localhost,1433;Database=master;User Id=SA;Password=YourStrong!Passw0rd;TrustServerCertificate=yes"