name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
      inputs:
        python-version:
          description: 'Python version to run'
          required: false
          default: '3.13'

permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: "YourStrong!Passw0rd"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Express"
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1' -C"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || matrix.python-version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install SQL Server tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and install Python package with maturin
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          maturin develop --release

      - name: Wait for MSSQL to be ready
        run: |
          echo "Waiting for SQL Server to be ready..."
          export PATH="$PATH:/opt/mssql-tools18/bin"
          for i in {1..60}; do
            echo "Attempt $i/60..."
            if nc -z localhost 1433; then
              if sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q "SELECT 1" -C 2>/dev/null; then
                echo "SQL Server is ready!"
                break
              fi
            fi
            sleep 5
            if [ $i -eq 60 ]; then
              echo "SQL Server failed to start after 5 minutes"
              docker logs $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest)
              exit 1
            fi
          done

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests
        env:
          FASTMSSQL_TEST_CONNECTION_STRING: "Server=localhost,1433;Database=master;User Id=SA;Password=YourStrong!Passw0rd;TrustServerCertificate=yes"